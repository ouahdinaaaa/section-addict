<style>
.coloris-consoles {
  padding: 4rem 1rem;
  background: linear-gradient(to top, #110023, #110022);
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-align: center;
}

.coloris-consoles h2 {
  font-size: 2rem;
  font-weight: 800;
  margin-bottom: 3rem;
  background: linear-gradient(90deg, #ff6d6d, #c180ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.coloris-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 0.3em;
  max-width: 1000px;
  margin: 0 auto;
}

.coloris-card {
  background: black;
  border-radius: 16px;
  padding: 1.5rem 1rem;
  text-align: left;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 0 16px rgba(255, 0, 255, 0.2);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.coloris-card:hover {
  transform: scale(1.03);
  box-shadow: 0 0 24px rgba(255, 128, 255, 0.4);
}

.card-info {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
}

.card-title {
  font-weight: 700;
  color: #fff;
  font-size: {{ section.settings.font_size_console_title_desktop }}px;
}

.card-description {
  font-size: {{ section.settings.font_size_description_desktop }}px;
  color: #d4d4d4;
  line-height: 1.4;
}

.card-price {
  font-size: 0.95rem;
  font-weight: bold;
  margin: 0.4rem 0;
  color: #b678e0;
}

.card-button {
  margin-top: 1rem;
  padding: 0.6rem 1rem;
  border-radius: 10px;
  text-align: center;
  font-weight: bold;
  font-size: 1.2rem;
  border: none;
  cursor: pointer;
  width: 100%;
  transition: all 0.3s ease;
  color: #ffffff;
  position: relative;
  overflow: hidden;
}

.card-button:hover {
  transform: scale(1.05);
  filter: brightness(1.2);
  box-shadow: 0 0 16px var(--hover-color);
}

.card-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.card-content {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
}

.card-image img {
  max-width: 80px;
  height: auto;
  border-radius: 12px;
  box-shadow: 0 0 8px rgba(255, 0, 255, 0.2);
}

.storage-selection {
  margin: 0.8rem 0;
}

.storage-option {
  padding: 0.4rem 0.8rem;
  border: 2px solid rgba(255, 255, 255, 0.3);
  background: rgba(255, 255, 255, 0.05);
  color: #ffffff;
  border-radius: 8px;
  cursor: pointer;
  font-size: 0.85rem;
  font-weight: 600;
  transition: all 0.3s ease;
  flex: 1;
  text-align: center;
}

  
.storage-options {
  display: flex;
  flex-direction: row; /* ✅ aligner horizontalement sur desktop */
  gap: 0.5rem;
  margin-top: 0.5rem;
  justify-content: flex-start;
}



.storage-option:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-2px);
}

.storage-option.selected {
  border-color: var(--card-color);
  background: var(--card-color);
  color: #ffffff;
  box-shadow: 0 0 10px var(--card-color);
}

.storage-label {
  font-size: 0.9rem;
  color: #d4d4d4;
  margin-bottom: 0.3rem;
}

.variant-error {
  color: #ff6b6b;
  font-size: 0.8rem;
  margin-top: 0.5rem;
  display: none;
}

.loading-spinner {
  display: none;
  width: 16px;
  height: 16px;
  border: 2px solid transparent;
  border-top: 2px solid #ffffff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 0.5rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .coloris-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .card-content {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.8rem;
  }

  .card-title {
    font-size: {{ section.settings.font_size_console_title_mobile }}px;
  }

  .card-description {
    font-size: {{ section.settings.font_size_description_mobile }}px;
  }

  .card-button {
    font-size: 1.1rem;
    padding: 0.6rem 0.8rem;
  }

  .card-image img {
    max-width: 65px;
  }

  .storage-options {
    flex-direction: row;
    gap: 0.4rem;
  }

  .storage-option {
    padding: 0.5rem;
    font-size: 0.9rem;
    width : fit-content;
  }
}

.coloris-name {
  color: white;
  font-weight: bold;
  display: inline-block;
  border-radius: 8px;
}

.card-title span {
  text-shadow: 0 0 6px currentColor;
  font-weight: 800;
}

.card-title span.gaming-highlight {
  text-shadow: 0 0 6px currentColor;
  font-weight: 800;
}

/* Cart Slide Styles */
.cart-slide {
  position: fixed;
  top: 0;
  right: -400px;
  width: 400px;
  height: 100vh;
  background: #1a1a1a;
  color: #ffffff;
  box-shadow: -4px 0 20px rgba(0, 0, 0, 0.5);
  transition: right 0.3s ease;
  z-index: 1000;
  overflow-y: auto;
  font-family: 'Orbitron', sans-serif;
}

.cart-slide.open {
  right: 0;
}

.cart-slide-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.cart-slide-overlay.open {
  opacity: 1;
  visibility: visible;
}

.cart-slide-header {
  padding: 1.5rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.cart-slide-title {
  font-size: 1.5rem;
  font-weight: bold;
  color: #b678e0;
}

.cart-slide-close {
  background: none;
  border: none;
  color: #ffffff;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 50%;
  transition: background 0.3s ease;
}

.cart-slide-close:hover {
  background: rgba(255, 255, 255, 0.1);
}

.cart-slide-content {
  padding: 1.5rem;
}

.cart-item {
  display: flex;
  gap: 1rem;
  padding: 1rem 0;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.cart-item-image {
  width: 60px;
  height: 60px;
  border-radius: 8px;
  object-fit: cover;
}

.cart-item-details {
  flex: 1;
}

.cart-item-title {
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.cart-item-variant {
  color: #b678e0;
  font-size: 0.9rem;
  margin-bottom: 0.25rem;
}

.cart-item-price {
  font-weight: bold;
  color: #ffffff;
}

.cart-empty {
  text-align: center;
  padding: 2rem;
  color: #999;
}

.cart-total {
  border-top: 2px solid #b678e0;
  padding: 1rem 0;
  margin-top: 1rem;
}

.cart-total-price {
  font-size: 1.25rem;
  font-weight: bold;
  color: #b678e0;
  text-align: right;
}

.cart-checkout-btn {
  width: 100%;
  padding: 1rem;
  background: linear-gradient(45deg, #b678e0, #8e44ad);
  color: white;
  border: none;
  border-radius: 10px;
  font-weight: bold;
  font-size: 1.1rem;
  cursor: pointer;
  margin-top: 1rem;
  transition: all 0.3s ease;
}

.cart-checkout-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 20px rgba(182, 120, 224, 0.4);
}

@media (max-width: 768px) {
  .cart-slide {
    width: 100%;
    right: -100%;
  }
}
</style>



<div class="coloris-consoles">
  <h2>{{ section.settings.title }}</h2>
  <div class="coloris-grid">
  {% for block in section.blocks %}
  {% assign product = all_products[block.settings.product_handle] %}

<div class="coloris-card"
     style="--card-color: {{ block.settings.color_background }};"
     data-color-name="{{ block.settings.color_name }}"
     data-real-color="{{ block.settings.real_color_value }}"
     data-product-id="{{ product.id }}"
     data-product-handle="{{ product.handle }}">


        <div class="card-content">
          <div class="card-info">
            <div class="card-title">
              Console retro <span class="gaming-highlight" style="color: {{ block.settings.color_background }};">Gaming</span> portable
            </div>
            <div class="card-description">{{ block.settings.description }}</div>
            <div class="card-description">
              🎮 Coloris :
              <span class="coloris-name"
                style="background-color: {{ block.settings.color_background }};
                       border: 2px solid {{ block.settings.color_border }};
                       color: {{ block.settings.color_text }};
                       font-size: {{ block.settings.color_font_size_desktop }}px;
                       padding: {{ block.settings.color_padding_vertical_desktop }}px {{ block.settings.color_padding_horizontal_desktop }}px;">
                {{ block.settings.color_name }}
              </span>
            </div>
            <div class="storage-selection">
              <div class="storage-label">💾 Stockage :</div>
              <div class="storage-options">
                <div class="storage-option" data-storage="64GB">64GB</div>
                <div class="storage-option" data-storage="128G">128G</div>
              </div>
            </div>
            <div class="card-price">
              Prix : <span class="price-display">{{ block.settings.price }}</span>
            </div>
            <div class="variant-error">Veuillez sélectionner un stockage</div>
          </div>
          <div class="card-image">
            {% if block.settings.console_image != blank %}
              <img src="{{ block.settings.console_image | img_url: '200x' }}" alt="Gameboy coloris {{ block.settings.color_name }}">
            {% endif %}
          </div>
        </div>

        <button class="card-button add-to-cart-btn"
          style="background-color: {{ block.settings.color_background }};
                 color: {{ block.settings.color_text }};
                 border: 2px solid {{ block.settings.color_border }};
                 --hover-color: {{ block.settings.color_background }}; width:fit-content;"
          data-color="{{ block.settings.color_name }}"
          {% if product == blank %}disabled{% endif %}>
          <div class="loading-spinner"></div>
          <span class="button-text">
            {% if product == blank %}
              Produit non configuré
            {% else %}
              {{ block.settings.button_text | default: 'Ajouter au panier' }}
            {% endif %}
          </span>
        </button>
      </div>
    {% endfor %}
  </div>
</div>



<script>
// 🧠 Cache des variantes par produit
window.productVariantsCache = {};

// 🔄 Récupère les variantes d'un produit Shopify
async function getProductVariants(productHandle) {
  if (window.productVariantsCache[productHandle]) {
    return window.productVariantsCache[productHandle];
  }

  try {
    const response = await fetch(`/products/${productHandle}.js`);
    const product = await response.json();
    window.productVariantsCache[productHandle] = product.variants;
    return product.variants;
  } catch (error) {
    console.error('Erreur lors de la récupération des variants:', error);
    return [];
  }
}

// 🧩 Fallback pour ouvrir le panier si toggleCart n'existe pas
function openCartSlide() {
  const slide = document.getElementById('cartSlide');
  const overlay = document.getElementById('cartSlideOverlay');
  if (slide && overlay) {
    slide.classList.add('open');
    overlay.classList.add('open');
    document.body.style.overflow = 'hidden';
  }
}

document.addEventListener('DOMContentLoaded', async function () {
  const cards = document.querySelectorAll('.coloris-card');

  // 🔁 Pour chaque carte Gameboy
  for (const card of cards) {
    const priceDisplay = card.querySelector('.price-display');
    const productHandle = card.getAttribute('data-product-handle');
    
    priceDisplay.textContent = '–'; // par défaut

    const variants = await getProductVariants(productHandle);
    if (variants.length > 0) {
      const defaultVariant = variants[0];
      priceDisplay.textContent = (defaultVariant.price / 100).toFixed(2) + '€';
    }
  }

  // 🎮 Sélection du stockage
  document.querySelectorAll('.storage-option').forEach(option => {
    option.addEventListener('click', async function () {
      const card = this.closest('.coloris-card');
      const productHandle = card.getAttribute('data-product-handle');
      const color = card.getAttribute('data-real-color')?.trim();
      const storage = this.dataset.storage?.trim();
      const priceDisplay = card.querySelector('.price-display');
      const errorDiv = card.querySelector('.variant-error');
      const addToCartBtn = card.querySelector('.add-to-cart-btn');

      // Sélection visuelle
      card.querySelectorAll('.storage-option').forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      errorDiv.style.display = 'none';
      addToCartBtn.disabled = false;

      // 🔍 Chercher la bonne variante
      const variants = await getProductVariants(productHandle);
      const variantName = `${color} ${storage}`.toLowerCase();
      const variant = variants.find(v => v.option1?.toLowerCase().trim() === variantName);

      if (variant) {
        priceDisplay.textContent = (variant.price / 100).toFixed(2) + '€';
      } else {
        priceDisplay.textContent = '–';
      }
    });
  });

  // 🛒 Bouton Ajouter au panier
  document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
    btn.addEventListener('click', async function () {
      const card = this.closest('.coloris-card');
      const selectedStorage = card.querySelector('.storage-option.selected');
      const errorMessage = card.querySelector('.variant-error');
      const spinner = this.querySelector('.loading-spinner');
      const buttonText = this.querySelector('.button-text');
      const originalText = buttonText.textContent;
      const originalBackgroundColor = this.style.backgroundColor;
      const productHandle = card.getAttribute('data-product-handle');
      const color = card.getAttribute('data-real-color')?.trim();
      const storage = selectedStorage?.dataset.storage?.trim();

      if (!selectedStorage || !productHandle) {
        errorMessage.textContent = 'Veuillez choisir un stockage.';
        errorMessage.style.display = 'block';
        return;
      }

      this.disabled = true;
      errorMessage.style.display = 'none';
      spinner.style.display = 'inline-block';
      buttonText.textContent = 'Chargement...';

      try {
        const variants = await getProductVariants(productHandle);
        const variantName = `${color} ${storage}`.toLowerCase();
        const variant = variants.find(v => v.option1?.toLowerCase().trim() === variantName);

        if (!variant) throw new Error('Variante introuvable.');
        if (!variant.available) throw new Error('Produit indisponible.');

        // ✅ Ajouter au panier
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
          body: JSON.stringify({ id: variant.id, quantity: 1 })
        });

        if (!res.ok) throw new Error();
        await res.json();

        // ✅ Succès
        buttonText.textContent = 'Ajouté !';
        btn.style.backgroundColor = '#28a745';

        // ✅ Ouvrir panier
        if (typeof toggleCart === 'function') {
          const cartSlide = document.getElementById('cartSlide');
          if (!cartSlide?.classList.contains('open')) {
            toggleCart();
          }
        } else {
          openCartSlide();
        }

        // ✅ Mettre à jour compteur
        const cartRes = await fetch('/cart.js');
        const cart = await cartRes.json();
        const count = document.querySelector('.cart-count');
        if (count) count.textContent = cart.item_count;
        if (typeof updateCartSlideContent === 'function') updateCartSlideContent(cart);

        // ✅ Réinitialisation
        setTimeout(() => {
          btn.disabled = false;
          spinner.style.display = 'none';
          buttonText.textContent = originalText;
          btn.style.backgroundColor = originalBackgroundColor;
        }, 2000);
      } catch (error) {
        console.error(error);
        errorMessage.textContent = "Erreur lors de l'ajout au panier. Veuillez réessayer.";
        errorMessage.style.display = 'block';
        btn.disabled = false;
        spinner.style.display = 'none';
        buttonText.textContent = originalText;
        btn.style.backgroundColor = '';
      }
    });
  });
});
</script>






{% schema %}
{
  "name": "Variantes Gameboy",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "🎮 Choisissez votre look, sans compromis sur la puissance"
    },
    {
      "type": "range",
      "id": "font_size_console_title_desktop",
      "label": "Taille du titre (desktop)",
      "min": 12,
      "max": 36,
      "default": 18,
      "step": 1,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "font_size_console_title_mobile",
      "label": "Taille du titre (mobile)",
      "min": 10,
      "max": 30,
      "default": 16,
      "step": 1,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "font_size_description_desktop",
      "label": "Taille du texte descriptif (desktop)",
      "min": 10,
      "max": 24,
      "default": 14,
      "step": 1,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "font_size_description_mobile",
      "label": "Taille du texte descriptif (mobile)",
      "min": 8,
      "max": 20,
      "default": 13,
      "step": 1,
      "unit": "px"
    }
  ],
  "blocks": [
    {
      "type": "gameboy",
      "name": "Console Gameboy",
      "settings": [
        {
          "type": "text",
          "id": "console_title",
          "label": "Titre de la console",
          "default": "Console retro Gaming portable"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Mini description",
          "default": "+ 15 000 jeux inclus 🎮 | Écran HD 3.5\" | Autonomie longue durée 🔋"
        },
        {
          "type": "text",
          "id": "color_name",
          "label": "Texte affiché pour le coloris",
          "default": "Violet galaxie"
        },
        {
          "type": "text",
          "id": "real_color_value",
          "label": "Nom technique de la couleur (pour variante Shopify)",
          "default": "Purple"
        },
        {
          "type": "color",
          "id": "color_background",
          "label": "Couleur de fond du coloris",
          "default": "#8e44ad"
        },
        {
          "type": "color",
          "id": "color_border",
          "label": "Couleur de la bordure du coloris",
          "default": "#ffffff"
        },
        {
          "type": "range",
          "id": "color_font_size_desktop",
          "label": "Taille texte coloris (desktop)",
          "min": 10,
          "max": 30,
          "default": 16,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "color_font_size_mobile",
          "label": "Taille texte coloris (mobile)",
          "min": 4,
          "max": 30,
          "default": 14,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "color_padding_horizontal_desktop",
          "label": "Padding horizontal (desktop)",
          "min": 2,
          "max": 30,
          "default": 10,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "color_padding_vertical_desktop",
          "label": "Padding vertical (desktop)",
          "min": 2,
          "max": 30,
          "default": 4,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "color_padding_horizontal_mobile",
          "label": "Padding horizontal (mobile)",
          "min": 2,
          "max": 30,
          "default": 8,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "color_padding_vertical_mobile",
          "label": "Padding vertical (mobile)",
          "min": 2,
          "max": 30,
          "default": 3,
          "step": 1,
          "unit": "px"
        },
        {
          "type": "text",
          "id": "price",
          "label": "Prix de base",
          "default": "85.99€"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Texte du bouton",
          "default": "Ajouter au panier"
        },
        {
          "type": "product",
          "id": "product_handle",
          "label": "Produit lié"
        },
        {
          "type": "image_picker",
          "id": "console_image",
          "label": "Image de la Gameboy"
        },
        {
          "type": "color",
          "id": "color_text",
          "label": "Couleur du texte du coloris",
          "default": "#ffffff"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Coloris Gameboy",
      "blocks": [
        { "type": "gameboy" },
        { "type": "gameboy" }
      ]
    }
  ]
}
{% endschema %}